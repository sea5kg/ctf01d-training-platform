/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateResultResponse from '../model/CreateResultResponse';
import ResultRequest from '../model/ResultRequest';
import ResultResponse from '../model/ResultResponse';

/**
* Results service.
* @module api/ResultsApi
* @version 1.1.0
*/
export default class ResultsApi {

    /**
    * Constructs a new ResultsApi. 
    * @alias module:api/ResultsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new game result
     * @param {String} gameId 
     * @param {module:model/ResultRequest} resultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/CreateResultResponse} and HTTP response
     */
    createResultWithHttpInfo(gameId, resultRequest) {
      let postBody = resultRequest;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling createResult");
      }
      // verify the required parameter 'resultRequest' is set
      if (resultRequest === undefined || resultRequest === null) {
        throw new Error("Missing the required parameter 'resultRequest' when calling createResult");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateResultResponse;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new game result
     * @param {String} gameId 
     * @param {module:model/ResultRequest} resultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/CreateResultResponse}
     */
    createResult(gameId, resultRequest) {
      return this.createResultWithHttpInfo(gameId, resultRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get game result
     * @param {String} gameId 
     * @param {String} resultId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ResultResponse} and HTTP response
     */
    getResultWithHttpInfo(gameId, resultId) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getResult");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling getResult");
      }

      let pathParams = {
        'gameId': gameId,
        'resultId': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ResultResponse;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results/{resultId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get game result
     * @param {String} gameId 
     * @param {String} resultId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ResultResponse}
     */
    getResult(gameId, resultId) {
      return this.getResultWithHttpInfo(gameId, resultId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get game scoreboard
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/ResultResponse>} and HTTP response
     */
    getScoreboardWithHttpInfo(gameId) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getScoreboard");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ResultResponse];
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/scoreboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get game scoreboard
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/ResultResponse>}
     */
    getScoreboard(gameId) {
      return this.getScoreboardWithHttpInfo(gameId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a result
     * @param {String} gameId 
     * @param {String} resultId 
     * @param {module:model/ResultRequest} resultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateResultWithHttpInfo(gameId, resultId, resultRequest) {
      let postBody = resultRequest;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling updateResult");
      }
      // verify the required parameter 'resultId' is set
      if (resultId === undefined || resultId === null) {
        throw new Error("Missing the required parameter 'resultId' when calling updateResult");
      }
      // verify the required parameter 'resultRequest' is set
      if (resultRequest === undefined || resultRequest === null) {
        throw new Error("Missing the required parameter 'resultRequest' when calling updateResult");
      }

      let pathParams = {
        'gameId': gameId,
        'resultId': resultId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}/results/{resultId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a result
     * @param {String} gameId 
     * @param {String} resultId 
     * @param {module:model/ResultRequest} resultRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateResult(gameId, resultId, resultRequest) {
      return this.updateResultWithHttpInfo(gameId, resultId, resultRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
