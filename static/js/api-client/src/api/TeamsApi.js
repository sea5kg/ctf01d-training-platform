/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApproveUserTeam200Response from '../model/ApproveUserTeam200Response';
import TeamRequest from '../model/TeamRequest';
import TeamResponse from '../model/TeamResponse';
import UserResponse from '../model/UserResponse';

/**
* Teams service.
* @module api/TeamsApi
* @version 1.1.0
*/
export default class TeamsApi {

    /**
    * Constructs a new TeamsApi. 
    * @alias module:api/TeamsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Approve connected user with team lead
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApproveUserTeam200Response} and HTTP response
     */
    approveUserTeamWithHttpInfo(teamId, userId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling approveUserTeam");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling approveUserTeam");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApproveUserTeam200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/members/{userId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Approve connected user with team lead
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApproveUserTeam200Response}
     */
    approveUserTeam(teamId, userId) {
      return this.approveUserTeamWithHttpInfo(teamId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Connect user with team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApproveUserTeam200Response} and HTTP response
     */
    connectUserTeamWithHttpInfo(teamId, userId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling connectUserTeam");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling connectUserTeam");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApproveUserTeam200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/members/{userId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Connect user with team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApproveUserTeam200Response}
     */
    connectUserTeam(teamId, userId) {
      return this.connectUserTeamWithHttpInfo(teamId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Create a new team
     * @param {module:model/TeamRequest} teamRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TeamResponse} and HTTP response
     */
    createTeamWithHttpInfo(teamRequest) {
      let postBody = teamRequest;
      // verify the required parameter 'teamRequest' is set
      if (teamRequest === undefined || teamRequest === null) {
        throw new Error("Missing the required parameter 'teamRequest' when calling createTeam");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TeamResponse;
      return this.apiClient.callApi(
        '/api/v1/teams', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new team
     * @param {module:model/TeamRequest} teamRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TeamResponse}
     */
    createTeam(teamRequest) {
      return this.createTeamWithHttpInfo(teamRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a team
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteTeamWithHttpInfo(teamId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling deleteTeam");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a team
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteTeam(teamId) {
      return this.deleteTeamWithHttpInfo(teamId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a team by ID
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/TeamResponse} and HTTP response
     */
    getTeamByIdWithHttpInfo(teamId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling getTeamById");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TeamResponse;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a team by ID
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/TeamResponse}
     */
    getTeamById(teamId) {
      return this.getTeamByIdWithHttpInfo(teamId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Leave user from team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApproveUserTeam200Response} and HTTP response
     */
    leaveUserFromTeamWithHttpInfo(teamId, userId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling leaveUserFromTeam");
      }
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling leaveUserFromTeam");
      }

      let pathParams = {
        'teamId': teamId,
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApproveUserTeam200Response;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/members/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Leave user from team
     * @param {String} teamId The ID of the team
     * @param {String} userId The ID of the user
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApproveUserTeam200Response}
     */
    leaveUserFromTeam(teamId, userId) {
      return this.leaveUserFromTeamWithHttpInfo(teamId, userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/TeamResponse>} and HTTP response
     */
    listTeamsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [TeamResponse];
      return this.apiClient.callApi(
        '/api/v1/teams', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all teams
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/TeamResponse>}
     */
    listTeams() {
      return this.listTeamsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get all members of a team
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/UserResponse>} and HTTP response
     */
    teamMembersWithHttpInfo(teamId) {
      let postBody = null;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling teamMembers");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [UserResponse];
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}/members', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get all members of a team
     * @param {String} teamId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/UserResponse>}
     */
    teamMembers(teamId) {
      return this.teamMembersWithHttpInfo(teamId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a team
     * @param {String} teamId 
     * @param {module:model/TeamRequest} teamRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateTeamWithHttpInfo(teamId, teamRequest) {
      let postBody = teamRequest;
      // verify the required parameter 'teamId' is set
      if (teamId === undefined || teamId === null) {
        throw new Error("Missing the required parameter 'teamId' when calling updateTeam");
      }
      // verify the required parameter 'teamRequest' is set
      if (teamRequest === undefined || teamRequest === null) {
        throw new Error("Missing the required parameter 'teamRequest' when calling updateTeam");
      }

      let pathParams = {
        'teamId': teamId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/teams/{teamId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a team
     * @param {String} teamId 
     * @param {module:model/TeamRequest} teamRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateTeam(teamId, teamRequest) {
      return this.updateTeamWithHttpInfo(teamId, teamRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
