/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SessionResponse from '../model/SessionResponse';
import SignInUser200Response from '../model/SignInUser200Response';
import SignInUserRequest from '../model/SignInUserRequest';
import SignOutUser200Response from '../model/SignOutUser200Response';

/**
* Sessions service.
* @module api/SessionsApi
* @version 1.1.0
*/
export default class SessionsApi {

    /**
    * Constructs a new SessionsApi. 
    * @alias module:api/SessionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Sign in user
     * Authenticates a user by user_name and password, starts a new session, and returns a session cookie.
     * @param {module:model/SignInUserRequest} signInUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignInUser200Response} and HTTP response
     */
    signInUserWithHttpInfo(signInUserRequest) {
      let postBody = signInUserRequest;
      // verify the required parameter 'signInUserRequest' is set
      if (signInUserRequest === undefined || signInUserRequest === null) {
        throw new Error("Missing the required parameter 'signInUserRequest' when calling signInUser");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SignInUser200Response;
      return this.apiClient.callApi(
        '/api/v1/auth/sign_in', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sign in user
     * Authenticates a user by user_name and password, starts a new session, and returns a session cookie.
     * @param {module:model/SignInUserRequest} signInUserRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignInUser200Response}
     */
    signInUser(signInUserRequest) {
      return this.signInUserWithHttpInfo(signInUserRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Sign out user
     * Authenticates a user by user_name and password, starts a new session, and returns a session cookie.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SignOutUser200Response} and HTTP response
     */
    signOutUserWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SignOutUser200Response;
      return this.apiClient.callApi(
        '/api/v1/auth/sign_out', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Sign out user
     * Authenticates a user by user_name and password, starts a new session, and returns a session cookie.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SignOutUser200Response}
     */
    signOutUser() {
      return this.signOutUserWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Validate current session and return user role
     * Check if the current session is valid and return the user's role.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/SessionResponse} and HTTP response
     */
    validateSessionWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SessionResponse;
      return this.apiClient.callApi(
        '/api/v1/auth/session', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Validate current session and return user role
     * Check if the current session is valid and return the user's role.
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/SessionResponse}
     */
    validateSession() {
      return this.validateSessionWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
