/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GameRequest from '../model/GameRequest';
import GameResponse from '../model/GameResponse';

/**
* Games service.
* @module api/GamesApi
* @version 1.1.0
*/
export default class GamesApi {

    /**
    * Constructs a new GamesApi. 
    * @alias module:api/GamesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * Create a new game
     * @param {module:model/GameRequest} gameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GameResponse} and HTTP response
     */
    createGameWithHttpInfo(gameRequest) {
      let postBody = gameRequest;
      // verify the required parameter 'gameRequest' is set
      if (gameRequest === undefined || gameRequest === null) {
        throw new Error("Missing the required parameter 'gameRequest' when calling createGame");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = GameResponse;
      return this.apiClient.callApi(
        '/api/v1/games', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Create a new game
     * @param {module:model/GameRequest} gameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GameResponse}
     */
    createGame(gameRequest) {
      return this.createGameWithHttpInfo(gameRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Delete a game
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteGameWithHttpInfo(gameId) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling deleteGame");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Delete a game
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteGame(gameId) {
      return this.deleteGameWithHttpInfo(gameId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Get a game by ID
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/GameResponse} and HTTP response
     */
    getGameByIdWithHttpInfo(gameId) {
      let postBody = null;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling getGameById");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GameResponse;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Get a game by ID
     * @param {String} gameId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/GameResponse}
     */
    getGameById(gameId) {
      return this.getGameByIdWithHttpInfo(gameId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * List all games
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Array.<module:model/GameResponse>} and HTTP response
     */
    listGamesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [GameResponse];
      return this.apiClient.callApi(
        '/api/v1/games', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * List all games
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Array.<module:model/GameResponse>}
     */
    listGames() {
      return this.listGamesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * Update a game
     * @param {String} gameId 
     * @param {module:model/GameRequest} gameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    updateGameWithHttpInfo(gameId, gameRequest) {
      let postBody = gameRequest;
      // verify the required parameter 'gameId' is set
      if (gameId === undefined || gameId === null) {
        throw new Error("Missing the required parameter 'gameId' when calling updateGame");
      }
      // verify the required parameter 'gameRequest' is set
      if (gameRequest === undefined || gameRequest === null) {
        throw new Error("Missing the required parameter 'gameRequest' when calling updateGame");
      }

      let pathParams = {
        'gameId': gameId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['sessionAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/games/{gameId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * Update a game
     * @param {String} gameId 
     * @param {module:model/GameRequest} gameRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    updateGame(gameId, gameRequest) {
      return this.updateGameWithHttpInfo(gameId, gameRequest)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
