/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TeamHistory model module.
 * @module model/TeamHistory
 * @version 1.1.0
 */
class TeamHistory {
    /**
     * Constructs a new <code>TeamHistory</code>.
     * The schema for recording the history of teams a user has joined and left.
     * @alias module:model/TeamHistory
     * @param name {String} The name of the team.
     * @param role {module:model/TeamHistory.RoleEnum} Role of the user's team.
     * @param join {Date} The timestamp when the user joined the team.
     */
    constructor(name, role, join) { 
        
        TeamHistory.initialize(this, name, role, join);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, role, join) { 
        obj['name'] = name;
        obj['role'] = role;
        obj['join'] = join;
    }

    /**
     * Constructs a <code>TeamHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TeamHistory} obj Optional instance to populate.
     * @return {module:model/TeamHistory} The populated <code>TeamHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TeamHistory();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('join')) {
                obj['join'] = ApiClient.convertToType(data['join'], 'Date');
            }
            if (data.hasOwnProperty('left')) {
                obj['left'] = ApiClient.convertToType(data['left'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TeamHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TeamHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TeamHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }

        return true;
    }


}

TeamHistory.RequiredProperties = ["name", "role", "join"];

/**
 * The name of the team.
 * @member {String} name
 */
TeamHistory.prototype['name'] = undefined;

/**
 * Role of the user's team.
 * @member {module:model/TeamHistory.RoleEnum} role
 */
TeamHistory.prototype['role'] = undefined;

/**
 * The timestamp when the user joined the team.
 * @member {Date} join
 */
TeamHistory.prototype['join'] = undefined;

/**
 * The timestamp when the user left the team.
 * @member {Date} left
 */
TeamHistory.prototype['left'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
TeamHistory['RoleEnum'] = {

    /**
     * value: "owner"
     * @const
     */
    "owner": "owner",

    /**
     * value: "captain"
     * @const
     */
    "captain": "captain",

    /**
     * value: "vice-captain"
     * @const
     */
    "vice-captain": "vice-captain",

    /**
     * value: "player"
     * @const
     */
    "player": "player",

    /**
     * value: "guest"
     * @const
     */
    "guest": "guest"
};



export default TeamHistory;

