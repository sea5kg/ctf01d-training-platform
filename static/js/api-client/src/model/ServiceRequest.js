/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ServiceRequest model module.
 * @module model/ServiceRequest
 * @version 1.1.0
 */
class ServiceRequest {
    /**
     * Constructs a new <code>ServiceRequest</code>.
     * @alias module:model/ServiceRequest
     * @param name {String} Name of the service
     * @param author {String} Author of the service
     * @param isPublic {Boolean} Boolean indicating if the service is public
     */
    constructor(name, author, isPublic) { 
        
        ServiceRequest.initialize(this, name, author, isPublic);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, name, author, isPublic) { 
        obj['name'] = name;
        obj['author'] = author;
        obj['is_public'] = isPublic;
    }

    /**
     * Constructs a <code>ServiceRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ServiceRequest} obj Optional instance to populate.
     * @return {module:model/ServiceRequest} The populated <code>ServiceRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ServiceRequest();

            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('logo_url')) {
                obj['logo_url'] = ApiClient.convertToType(data['logo_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('is_public')) {
                obj['is_public'] = ApiClient.convertToType(data['is_public'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ServiceRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ServiceRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ServiceRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['logo_url'] && !(typeof data['logo_url'] === 'string' || data['logo_url'] instanceof String)) {
            throw new Error("Expected the field `logo_url` to be a primitive type in the JSON string but got " + data['logo_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

ServiceRequest.RequiredProperties = ["name", "author", "is_public"];

/**
 * Name of the service
 * @member {String} name
 */
ServiceRequest.prototype['name'] = undefined;

/**
 * Author of the service
 * @member {String} author
 */
ServiceRequest.prototype['author'] = undefined;

/**
 * URL to the logo of the service
 * @member {String} logo_url
 */
ServiceRequest.prototype['logo_url'] = undefined;

/**
 * A brief description of the service
 * @member {String} description
 */
ServiceRequest.prototype['description'] = undefined;

/**
 * Boolean indicating if the service is public
 * @member {Boolean} is_public
 */
ServiceRequest.prototype['is_public'] = undefined;






export default ServiceRequest;

