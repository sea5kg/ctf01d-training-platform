/**
 * CTF Management API
 * API for managing CTF (Capture The Flag) games, teams, users, and services.
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserRequest model module.
 * @module model/UserRequest
 * @version 1.1.0
 */
class UserRequest {
    /**
     * Constructs a new <code>UserRequest</code>.
     * @alias module:model/UserRequest
     * @param userName {String} The login of the user
     * @param role {module:model/UserRequest.RoleEnum} The role of the user (admin, player or guest)
     * @param status {String} Status of the user (active, disabled)
     * @param password {String} User password
     */
    constructor(userName, role, status, password) { 
        
        UserRequest.initialize(this, userName, role, status, password);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userName, role, status, password) { 
        obj['user_name'] = userName;
        obj['role'] = role;
        obj['status'] = status;
        obj['password'] = password;
    }

    /**
     * Constructs a <code>UserRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserRequest} obj Optional instance to populate.
     * @return {module:model/UserRequest} The populated <code>UserRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserRequest();

            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('user_name')) {
                obj['user_name'] = ApiClient.convertToType(data['user_name'], 'String');
            }
            if (data.hasOwnProperty('role')) {
                obj['role'] = ApiClient.convertToType(data['role'], 'String');
            }
            if (data.hasOwnProperty('avatar_url')) {
                obj['avatar_url'] = ApiClient.convertToType(data['avatar_url'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('team_ids')) {
                obj['team_ids'] = ApiClient.convertToType(data['team_ids'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['user_name'] && !(typeof data['user_name'] === 'string' || data['user_name'] instanceof String)) {
            throw new Error("Expected the field `user_name` to be a primitive type in the JSON string but got " + data['user_name']);
        }
        // ensure the json data is a string
        if (data['role'] && !(typeof data['role'] === 'string' || data['role'] instanceof String)) {
            throw new Error("Expected the field `role` to be a primitive type in the JSON string but got " + data['role']);
        }
        // ensure the json data is a string
        if (data['avatar_url'] && !(typeof data['avatar_url'] === 'string' || data['avatar_url'] instanceof String)) {
            throw new Error("Expected the field `avatar_url` to be a primitive type in the JSON string but got " + data['avatar_url']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['team_ids'])) {
            throw new Error("Expected the field `team_ids` to be an array in the JSON data but got " + data['team_ids']);
        }

        return true;
    }


}

UserRequest.RequiredProperties = ["user_name", "role", "status", "password"];

/**
 * The name of the user
 * @member {String} display_name
 */
UserRequest.prototype['display_name'] = undefined;

/**
 * The login of the user
 * @member {String} user_name
 */
UserRequest.prototype['user_name'] = undefined;

/**
 * The role of the user (admin, player or guest)
 * @member {module:model/UserRequest.RoleEnum} role
 */
UserRequest.prototype['role'] = undefined;

/**
 * URL to the user's avatar
 * @member {String} avatar_url
 */
UserRequest.prototype['avatar_url'] = undefined;

/**
 * Status of the user (active, disabled)
 * @member {String} status
 */
UserRequest.prototype['status'] = undefined;

/**
 * User password
 * @member {String} password
 */
UserRequest.prototype['password'] = undefined;

/**
 * @member {Array.<String>} team_ids
 */
UserRequest.prototype['team_ids'] = undefined;





/**
 * Allowed values for the <code>role</code> property.
 * @enum {String}
 * @readonly
 */
UserRequest['RoleEnum'] = {

    /**
     * value: "admin"
     * @const
     */
    "admin": "admin",

    /**
     * value: "player"
     * @const
     */
    "player": "player",

    /**
     * value: "guest"
     * @const
     */
    "guest": "guest"
};



export default UserRequest;

